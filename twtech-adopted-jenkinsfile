# adapted-jenkinsfile:
pipeline {
    agent none                         # No default agent; define agents per stage
    parameters {
      choice(name: 'aws_account',choices: ['980921744112', '4568366404742', '922266408974','576900672829'], description: 'aws account hosting image registry')
      choice(name: 'Environment', choices: ['Dev', 'QA', 'UAT', 'Prod'], description: 'Target environment for deployment')
      string(name: 'ecr_tag', defaultValue: '1.36.0', description: 'Assign the ECR tag version for the build')
    }
   environment {
        SCANNER_HOME=tool 'sonar-scanner'
}
stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
     stage('Checkout from Git'){
            steps{
                git branch: 'master', url: git branch: 'master', credentialsId: 'github-cred', url: 'https://github.com/Devopspat35/AddressBookApp-by-nfusi.git'
            }
        }

  stages {
        stage('Build and Test Sonarqube Analysis') {
            agent {
                label 'sonarqube-maven'      # Specify the agent for this stage
            }
            steps {
                 withSonarQubeEnv('sonar-server') {
                    sh ''' 
                  $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=AddressBook \
                  -Dsonar.projectKey=AddressBook \
                   -Dsonar.sources=src/main/java/ \
                   -Dsonar.java.binaries=target/classes \
                    '''
                }
            }
        }
       stage("quality gate"){
          agent {
                label 'sonarqube-maven'      # Specify the agent for this stage
              }
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }
      stage('Install Dependencies') {
          agent {
                label 'sonarqube-maven'      # Specify the agent for this stage
              }

              steps {
                sh "mvn install"
            }
        }
         stage('OWASP FS SCAN') {
          agent {
                label 'sonarqube-maven'      # Specify the agent for this stage
                }
  steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
      stage('TRIVY FS SCAN') {
            agent {
                label 'masternode-docker'                      # Specify the agent for this stage
                   }
 
     steps{
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage('Docker Build and Push') {
            agent {
                label 'masternode-docker'                             # Specify the agent for this stage 

               }

            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build --build -t addressbook ."
                       sh "docker tag addressbook devopspatemf2021/addressbook:latest "
                       sh "docker push devopspatemf2021/addressbook:latest "

                }
            }

        }
       stage("TRIVY"){
       agent {
                label 'masternode-docker'                      # Specify the agent for this stage
            steps{
                sh "trivy image nasi101/netflix:latest > trivyimage.txt" 
            }
        }
        
        stage('Application Deployment in k8s-cluster') {
            agent {
                label 'masternode-docker'  # Specify the agent , create kubernete/app-svc.yaml and ingress-role with encryption certificate
            }
            steps{
                script{
                    dir('Kubernetes') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'eks-cluster', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                                sh 'kubectl apply -f  app-svc.yaml'
                                sh 'kubectl apply -f  ingress-role.yaml'
                        }   
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()

        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'twtech671@gmail.com',                          #change mail here
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}

/*
stage('7. Email Notification') {
      steps {
        mail bcc: 'twtech671@gmail.com', body: '''Build is Over. Check the application using the URL below:
         https://think-with-tech.blogspot.com/
         Let me know if the changes look okay.
         Thanks,
         Dominion System Technologies,
         +1 (220) 219-9866''', 
         subject: 'Application was Successfully Deployed!!', to: ''twtech671@gmail.com'
      }
    }
  }
}
*/
